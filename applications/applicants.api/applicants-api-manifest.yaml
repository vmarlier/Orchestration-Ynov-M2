---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: applicants-api-netpol-allow-communication-with-web
  namespace: project
spec:
  podSelector:
    matchLabels:
      app: applicants-api
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              role: project
        - podSelector:
            matchLabels:
              app: web
      ports:
        - protocol: TCP
          port: 80
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              role: project
        - podSelector:
            matchLabels:
              app: web
      ports:
        - protocol: TCP
          port: 80
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: applicants-api-netpol-allow-communication-with-rabbitmq
  namespace: project
spec:
  podSelector:
    matchLabels:
      app: applicants-api
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              role: project
        - podSelector:
            matchLabels:
              app: rabbitmq
      ports:
        - protocol: TCP
          port: 80
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              role: project
        - podSelector:
            matchLabels:
              app: rabbitmq
      ports:
        - protocol: TCP
          port: 5672
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: applicants-api-netpol-allow-communication-with-sql
  namespace: project
spec:
  podSelector:
    matchLabels:
      app: applicants-api
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              role: database
        - podSelector:
            matchLabels:
              app: sql.data
      ports:
        - protocol: TCP
          port: 80
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              role: database
        - podSelector:
            matchLabels:
              app: sql.data
      ports:
        - protocol: TCP
          port: 1433
---
apiVersion: v1
kind: Secret
metadata:
  name: mssql-secret
  namespace: project
type: Opaque
data:
  costring: U2VydmVyPXNxbC1kYXRhLXN2Yy5kYXRhYmFzZS5zdmMuY2x1c3Rlci5sb2NhbDtVc2VyPXNhO1Bhc3N3b3JkPVBhc3NAd29yZDtEYXRhYmFzZT1kb3RuZXRnaWdzLmFwcGxpY2FudHM=

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: applicants-api-svc
  name: applicants-api-svc
  namespace: project
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: applicants-api

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: applicants-api
  name: applicants-api
  namespace: project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: applicants-api
  template:
    metadata:
      labels:
        app: applicants-api
    spec:
      containers:
        - env:
            - name: ConnectionString
              valueFrom:
                secretKeyRef:
                  name: mssql-secret
                  key: costring
          image: developpementgroupe99cr.azurecr.io/applicants-api:base
          resources:
            requests:
              memory: "128Mi"
              cpu: "128m"
            limits:
              memory: "256Mi"
              cpu: "256m"
          imagePullPolicy: Always
          name: applicants-api
          ports:
            - containerPort: 80
              # readinessProbe:
            #httpGet:
            #path: /api/values
            #port: 80
            #initialDelaySeconds: 15
            # periodSeconds: 5
            #livenessProbe:
            #httpGet:
            #  path: /api/values
            #  port: 80
            #initialDelaySeconds: 30
            #periodSeconds: 5
      imagePullSecrets:
        - name: acr-secret
      restartPolicy: Always
